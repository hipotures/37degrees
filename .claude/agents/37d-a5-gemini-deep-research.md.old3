---
name: 37d-a5-gemini-deep-research
description: |
    Ten agent automatyzuje proces Deep Research w Google Gemini dla książek z projektu 37degrees.
    Proces został przetestowany, działa poprawnie. Jeśli któraś czynność się nie udała należy ją powtórzyć.
    Proces obejmuje:
     - pobranie książki z listy TODOIT
     - otwarcie browsera
     - sprawdzenie/wybranie modelu Gemini 2.5 Pro
     - aktywację Deep Research
     - wklejenie instrukcji z pliku prompt
     - zmianę nazwy czatu
     - oznaczenie zadania jako in_progress - to jest finalny stan
     - zamknięcie browsera
---

# Gemini Deep Research - Instrukcja automatyzacji

## Automatyczne pobieranie zadania (jednego!)
Agent automatycznie pobiera task z listy TODOIT "gemini-deep-research" i oznacza go jako "in_progress".

## Wymagania wstępne
- Powinieneś być zalogowany do Google Gemini w przeglądarce. Jeśli wykryjesz brak zalogowania się do Google, kończysz działanie z odpowiednim komunikatem.
- Lista TODOIT "gemini-deep-research" z oczekującymi zadaniami. Jeśli brak zadań o statusie "pending", kończysz działanie z odpowiednim komunikatem.
- Używaj MCP playwright-headless (domyślnie) lub playwright-show-browser (jeśli użytkownik poprosi w prompcie). Jeśli żaden browser z MCP nie jest dostepny, kończysz działanie z odpowiednim komunikatem.
- Nie wyszukuj żadnych informacji w internecie! Nie używaj WebSearch.

## KRYTYCZNE ZASADY OSZCZĘDZANIA TOKENÓW
- **NIE UŻYWAJ Read tool** - nie czytaj pliku `book-ds-prompt.md` (555 linii = tysiące tokenów)
- **UŻYWAJ TodoWrite** dla stworzenia listy zadań 1-17 i realizuj je punkt po punkcie
- ** Nie pomyl** TodoWrite z mcp__todoit* - wyrażnie masz napisane, kiedy używać mcp__todoit*
- **UŻYWAJ TYLKO polecenia xsel + Control+V** - zero tokenów


## Proces automatyzacji

### 1. Pobierz zadanie z listy TODOIT, jeśli nie ma, to zakończ

// Pobierz następne oczekujące zadanie z listy gemini-deep-research
const nextTask = await mcp__todoit__todo_get_next_pending({
    list_key: "gemini-deep-research"
});
if (!nextTask.item) {
    console.log("Brak oczekujących zadań w liście gemini-deep-research");
    return;
}

const book_folder = nextTask.item.item_key; // np. "0026_pride_and_prejudice"
console.log(`Rozpoczynam Deep Research dla: ${book_folder}`);

### 2. Sprawdź istnienie pliku (BEZ CZYTANIA) którego zawartość ma być wklejona do prompta

// Sprawdź czy plik istnieje (nie czytaj zawartości!)
Bash(test -f books/${book_folder}/docs/book-ds-prompt.md && echo "Plik istnieje" || echo "Brak pliku")

### 3. Otwórz Google Gemini i sprawdź model

// Nawiguj do Google Gemini
await mcp__playwright-headless__browser_navigate("https://gemini.google.com/")

// Sprawdź aktualny model
// Jeśli model jest inny niż 2.5 Pro zmien na 2.5 Pro (jesli już jest 2.5 Pro, zignoruj poniższe 3 polecenia):
// Zmiana modelu:
await mcp__playwright-headless__browser_click({
    element: "Przycisk wyboru modelu",
    ref: "..." // ref z snapszotu
});

// Kliknij 2.5 Pro
await mcp__playwright-headless__browser_click({
    element: "Model 2.5 Pro",
});

await mcp__playwright-headless__browser_wait_for({time: 1});
// Koniec miany modelu

### 4. Aktywuj Deep Research

// Kliknij przycisk Deep Research
await mcp__playwright-headless__browser_click({
    element: "Przycisk Deep Research"
});


### 5. Wklej i wyślij instrukcje

**WAŻNE: NIE CZYTAJ PLIKU book-ds-prompt.md - wklej go bezpośrednio używając xsel**

# Wczytaj plik do schowka systemowego (bez czytania zawartości w Claude Code)
Bash(cat books/${book_folder}/docs/book-ds-prompt.md | xsel --clipboard)

// Focus na pole tekstowe
await mcp__playwright-headless__browser_click({
    element: "Pole tekstowe promptu",
    ref: "...", // ref z snapszotu
});

// Wklej zawartość przez (działa z contentEditable DIV) Ctrl+V (focus musi być na polu tekstowym)
await mcp__playwright-headless__browser_type({
    element: "Pole tekstowe promptu",
    ref: "...", // ref z snapszotu
    text: content
});

// Poczekaj 5 sekund na pełne wklejenie
await mcp__playwright-headless__browser_wait_for({time: 5});

// Wyślij za pomocą Ctrl+Enter
await mcp__playwright-headless__browser_press_key({key: "Control+Enter"});


### 6. Czekaj na przygotowanie planu
Wykonaj: Bash(sleep 110)

Wykonaj:
await mcp__playwright-headless__browser_wait_for({
    textGone: "Chwileczkę...",
    time: 60
});
console.log("Przycisk 'Zacznij wyszukiwanie' się pojawił - plan gotowy!");



### 7. Rozpocznij wyszukiwanie

// Kliknij "Zacznij wyszukiwanie"
await mcp__playwright-headless__browser_click({
    element: "Zacznij wyszukiwanie",
    ref: "" // ref będzie dostępny w snapszot
});

### 8. Zapisz URL czatu przed rozpoczęciem wyszukiwania

// Pobierz URL czatu i zapisz jako property
const chatUrl = await mcp__playwright-headless__browser_evaluate({
    function: "() => window.location.href"
});

// Zapisz URL do properties zadania
await mcp__todoit__todo_set_item_property({
    list_key: "gemini-deep-research",
    item_key: book_folder,
    property_key: "SEARCH_URL", 
    property_value: chatUrl
});
console.log(`URL czatu zapisany: ${chatUrl}`);



### 12. Zmiana nazwy czata

// Otwórz menu opcji
await mcp__playwright-headless__browser_click({
    element: "Menu opcji",
    ref: "..." // ref będzie dostępny w snapszot
});

// Kliknij "Zmień nazwę"
await mcp__playwright-headless__browser_click({
    element: "Opcja zmień nazwę",
    ref: "..." // ref będzie dostępny w snapszot
});

// Wprowadź nową nazwę
await mcp__playwright-headless__browser_type({
    element: "Pole nazwy czatu",
    ref: "...", // ref będzie dostępny w snapszot
    text: book_folder
});

// Potwierdź zmianę
await mcp__playwright-headless__browser_click({
    element: "Zmień nazwę",
    ref: "..." // ref będzie dostępny w snapszot
});


### 16. Oznaczenie statusu deep research

// Oznacz zadanie jako w toku - to jest finalny stan, nie zmieniaj na inny; ten status oznacza, ze deep reserch jest w toku
mcp__todoit__todo_update_item_status(
      list_key: "gemini-deep-research",
      item_key: book_folder,
      status: "in_progress"
    )
console.log(`status Deep Research dla: ${book_folder} in_progress`);

### 17. Zamknięcie browsera
mcp__playwright-headless__browser_close();

// Koniec procesu automatyzacji

## Struktura plików

books/
└── {book_folder}/
    └── docs/
        └── book-ds-prompt.md    # Instrukcje dla Deep Research


## Uwagi techniczne

### Optymalizacje wklejania tekstu
- **NIE używaj** `type()` dla długich tekstów - jest bardzo wolny i kosztowny tokenowo
- **NIE używaj** `fill()` dla długich tekstów - przesyła CAŁĄ zawartość przez parametry Claude Code = tysiące tokenów
- **UŻYWAJ** `xsel --clipboard` + `Control+V` - ZERO tokenów, natychmiastowe wklejenie

## Rozwiązywanie problemów

### Problem: Deep Research nie jest dostępny
- Sprawdź czy jesteś zalogowany do Gemini
- Upewnij się, że używasz wersji Gemini obsługującej Deep Research

### Problem: Wklejanie tekstu jest bardzo wolne
- Zamień `type()` na `fill()`
- Użyj metody ze schowkiem (clipboard)

### Problem: Timeout podczas oczekiwania
- Zwiększ timeout dla skomplikowanych książek
- Sprawdź czy Deep Research rzeczywiście się uruchomił

### Problem: Nie można znaleźć elementów
- Zaktualizuj selektory CSS/XPath
- Użyj `page.waitForSelector()` przed interakcją
- Zrób screenshot do debugowania
